namespace MetaFac.Schemas
{
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false)]
    public class EntityAttribute : System.Attribute
    {
        public readonly string? Reason;
        public readonly MetaFac.Schemas.ItemState State;
        public readonly System.Guid UniqueId;
        public EntityAttribute(string uniqueId, MetaFac.Schemas.ItemState state = 0, string? reason = null) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Enum, AllowMultiple=false)]
    public class EnumTypeAttribute : System.Attribute
    {
        public readonly string? Reason;
        public readonly MetaFac.Schemas.ItemState State;
        public readonly System.Guid UniqueId;
        public EnumTypeAttribute(string uniqueId, MetaFac.Schemas.ItemState state = 0, string? reason = null) { }
    }
    public interface IProxyConverter<TExternal, TInternal>
    {
        TExternal? ToExternal(TInternal? value);
        TInternal? ToInternal(TExternal? value);
    }
    [System.Flags]
    public enum ItemState
    {
        Active = 0,
        Hidden = 1,
        Deprecated = 2,
        Deleted = 3,
    }
    [System.AttributeUsage(System.AttributeTargets.Property)]
    public class MemberAttribute : System.Attribute
    {
        public readonly string? Reason;
        public readonly int Sequence;
        public readonly MetaFac.Schemas.ItemState State;
        public MemberAttribute(int sequence, MetaFac.Schemas.ItemState state = 0, string? reason = null) { }
    }
    public abstract class ProxyAttributeBase : System.Attribute
    {
        public readonly string ConverterTypeName;
        public readonly string ExternalName;
        public readonly string InternalName;
        protected ProxyAttributeBase(System.Type externalType, System.Type internalType, System.Type converterType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=true)]
    public class RefTypeProxyAttribute<TExternal, TInternal, TConverter> : MetaFac.Schemas.ProxyAttributeBase
        where TExternal :  class
        where TInternal :  class
        where TConverter : MetaFac.Schemas.IProxyConverter<TExternal, TInternal>
    {
        public RefTypeProxyAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Property)]
    public class TokenAttribute : System.Attribute
    {
        public readonly string Name;
        public readonly string Value;
        public TokenAttribute(string name, string value) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=true)]
    public class ValTypeProxyAttribute<TExternal, TInternal, TConverter> : MetaFac.Schemas.ProxyAttributeBase
        where TExternal :  struct
        where TInternal :  struct
        where TConverter : MetaFac.Schemas.IProxyConverter<TExternal, TInternal>
    {
        public ValTypeProxyAttribute() { }
    }
}